#include "dkli.dkh"
#!
module "lib.dk"
{
    #include "cookies.dkl"
    #include "webauth.dkl"
    #include "dbr.dkh"
    do _map_function(@lib_dbr,"induxsoft.Connections.Manager","ResetStorage","reset","void","void")
    @MODULE_FIRST_LOAD=@false
    

    save_spa_cookie::
    {
        new data {}
        data<@KEY_CONNECTION_QNAME>:field.dstr(@SPA_CONTEXT,@KEY_CONNECTION_QNAME,"")
        data<@KEY_SESSION_ID>:field.dstr(@SPA_CONTEXT,@KEY_SESSION_ID,"")
        _cookie=url_encode(to.json(data))

        do cookie.setw(@COOKIE_NAME,_cookie+";Path="+@BASE_URL+";Max-Age=31104000")
    }

    load_spa_cookie::
    {
        _cookie=url_dcode(cookie.get(@COOKIE_NAME))

        if trim(_cookie)==""
        {
            return
        }

        ref data=from.json(_cookie)

        if field.dstr(@SPA_CONTEXT,@KEY_CONNECTION_QNAME,"")=="" && not(field.exist(@SPA_CONTEXT,@KEY_CONNECTION_QNAME)) && field.dstr(data,@KEY_CONNECTION_QNAME,"")!=""
        {
            @SPA_CONTEXT<@KEY_CONNECTION_QNAME>:field.dstr(data,@KEY_CONNECTION_QNAME,"")
        }

        if field.dstr(@SPA_CONTEXT,@KEY_SESSION_ID,"")=="" && not(field.exist(@SPA_CONTEXT,@KEY_SESSION_ID)) && field.dstr(data,@KEY_SESSION_ID,"")!=""
        {
            @SPA_CONTEXT<@KEY_SESSION_ID>:field.dstr(data,@KEY_SESSION_ID,"")
        }
        exception{}
    }

    on_initRequest::
    {  
        
        _context=field.dstr(@http_context,@HTTP_REQUEST_PATH_SPA_CONTEXT,"")

        if _context!=""
        {
            ref @SPA_CONTEXT=from.json(_context)
        }
        ws=@@(@http_context,"request/get/ws")
        ids=@@(@http_context,"session/user/ids")
        
        if ws!=""{
            @SPA_CONTEXT<"ws">:ws
            @SPA_CONTEXT<@KEY_CONNECTION_QNAME>:@qname_ws}
        if ws!="" && not(dbr.check_alter_access(@@(@http_context,"&session/user"))) {
         // do rise_error(0,"Usuario no autorizado.")
            @http_context<"response/headers/Location">:@URL_WORKSPACE
            return
        }
        if ids!="" && ws!=""{
            do dbr.alter_id(@@(@http_context,"$session/user/uid"),@@(@http_context,"$session/user/name"), ids)
            @SPA_CONTEXT<@KEY_SESSION_ID>:ids
        }
        
        do load_spa_cookie()
        
        if field.dstr(@http_context,@HTTP_REQUEST_PATH_CONNECTION_QNAME,"")!="" 
        {
            @SPA_CONTEXT<@KEY_CONNECTION_QNAME>: field.str(@http_context,@HTTP_REQUEST_PATH_CONNECTION_QNAME)
        }
        if field.dstr(@http_context,@HTTP_REQUEST_PATH_SESSION_ID,"")!=""
        {
            if tolower(field.str(@http_context,@HTTP_REQUEST_PATH_SESSION_ID))==tolower(@KEYWORD_LOGOUT)
            {
                new p
                {
                    @"ids":field.dstr(@SPA_CONTEXT,@KEY_SESSION_ID,"")
                    @"qname":field.dstr(@SPA_CONTEXT,@KEY_CONNECTION_QNAME,"")
                }
                do dbr.logout(dbr.reconnect(trim(@@(p,"qname")),trim(@@(p,"ids"))),@@(p,"ids"))
                do dbr.logout(dbr.reconnect(@QNAME_PERFILES,trim(@@(p,"ids"))),trim(@@(p,"ids")))
                @SPA_CONTEXT<@KEY_SESSION_ID>: ""
                exception{@SPA_CONTEXT<@KEY_SESSION_ID>: ""}

            }
            else
            {
                @SPA_CONTEXT<@KEY_SESSION_ID>: field.str(@http_context,@HTTP_REQUEST_PATH_SESSION_ID)
            }
            
            do save_spa_cookie()
        }
        
    }

    setModulePath::name
    {

        path=path.concat(path.concat(@MODULES_PATH,name),@INDEX_PAGE)
        @http_context<"request/headers/PATH_TRANSLATED">:path

        return path
    }

    content::
    {
        moduleid=dir.name(field.str(@http_context,"request/headers/PATH_TRANSLATED"))
        pos=findstr(replace(moduleid,"\\","/"),replace(@MODULES_PATH,"\\","/"))
        if pos>=0 { moduleid=remove(moduleid,pos,length(@MODULES_PATH)) }
        else { moduleid=file.name(moduleid) }
        do module_register(moduleid)
        do module_header(@module_id)
        do content_module()
        do module_footer(@module_id)
        
    }
    
    load_global_script::module_id
    {
        if not(@MODULE_FIRST_LOAD) && @JS_DELIVER_ONLY1TIME
        {
            return ""
        }

        if file.exists(path.concat(path.concat(@MODULES_PATH,module_id),@MODULE_SCRIPT))
        {
            return file.rtext(path.concat(path.concat(@MODULES_PATH,module_id),@MODULE_SCRIPT))
        }
    }

    load_global_css::module_id
    {
        if not(@MODULE_FIRST_LOAD) && @CSS_DELIVER_ONLY1TIME
        {
            return ""
        }

        if file.exists(path.concat(path.concat(@MODULES_PATH,module_id),@MODULE_CSS))
        {
            return file.rtext(path.concat(path.concat(@MODULES_PATH,module_id),@MODULE_CSS))
        }

    }

    module_header::module_id
    {
        if @MODULE_FIRST_LOAD || not(@CSS_DELIVER_ONLY1TIME)
        {
            ##
            style
            {$'
                #<load_global_css(module_id)>
            '}
            ##    
        }
    }

    module_footer::module_id
    {
        if field.exist(@SPA_CONTEXT,"current_request")
        {
            @SPA_CONTEXT<"current_request/data*">:@null
        }
        
        if @MODULE_FIRST_LOAD || not(@JS_DELIVER_ONLY1TIME)
        {
            ##
            script(type="text/javascript")
            {$'
                #<load_global_script(module_id)>
                spa_context=#<to.json(@SPA_CONTEXT)>;
            '}
            ##    
        }
        else
        {
            ##
            script(type="text/javascript")
            {$'
                spa_context=#<to.json(@SPA_CONTEXT)>;
            '}
            ##
        }
    }

    module_register::module_id
    {
        @module_id=module_id

        if file.exists(path.concat(path.concat(@MODULES_PATH,module_id),@MODULE_META))
        {
            ref @MODULE_INFO=from.json(file.rtext(path.concat(path.concat(@MODULES_PATH,module_id),@MODULE_META)))

            if trim(field.dstr(@MODULE_INFO,"id",""))!=""
            {
                @module_id=field.dstr(@MODULE_INFO,"id","")
                module_id=@module_id
            }
        }
        else
        {
            @MODULE_INFO<"id">:module_id
        }

        if not(is_module_loaded(module_id))
        {
            do list.add(field.obj(@SPA_CONTEXT,"MODULES"),module_id)
            @MODULE_FIRST_LOAD=@true
        }
    }

    
    is_module_loaded::module_id
    {
        if not(field.exist(@SPA_CONTEXT,"MODULES"))
        {
            @SPA_CONTEXT<"MODULES*">:list.create()
        }
        else
        {
            if isnull(field.obj(@SPA_CONTEXT,"MODULES"))
            {
                @SPA_CONTEXT<"MODULES*">:list.create()
            }
        }

        for i=0;i<list.count(field.obj(@SPA_CONTEXT,"MODULES"))
        {
            if tolower(list.str(field.obj(@SPA_CONTEXT,"MODULES"),i))==tolower(module_id)
            {
                return @true
            }
        }

        return @false
    }

    parse_qname::qname
    {
        ref secs=split(qname,"/")
        qn=list.str(secs,list.count(secs)-1)

        ref parts=split(qn,"@")
        ap=list.str(parts,list.count(parts)-1)
        cn=list.str(parts,0)

        new info
        {
            @"str": qn
            @"app": ap
            @"cnn": cn
        }

        return info

        exception { return @null }

    }

    readFile::name
    {
        return file.rtext(file_path(name))
    }

    file_path::name
    {
        fullpath=path.concat( dir.name(field.str(@http_context,"request/headers/PATH_TRANSLATED")), name)

        if not(file.exists(fullpath)) { fullpath=lib_path(name) }

        if not(file.exists(fullpath)) { fullpath=name }

        return fullpath
    }

    lib_path::name
    {
        p=@LIBRARIES_PATH

        if isset("@SPA_CONTEXT")
        {
            if trim(field.dstr(@SPA_CONTEXT,"CONNECTION_QNAME",""))!=""
            {
                ref cni=parse_qname(trim(field.dstr(@SPA_CONTEXT,"CONNECTION_QNAME","")))

                if not(isnull(cni))
                {
                    if file.exists(path.concat(path.concat(p,field.str(cni,"str")),name))
                    {
                        p=path.concat(p,field.str(cni,"str"))
                    }
                    else
                    {
                        if file.exists(path.concat(path.concat(p,"@"+field.str(cni,"app")),name))
                        {
                            p=path.concat(p,"@"+field.str(cni,"app"))
                        }
                    }
                }
            }
        }

        return path.concat(p,name)
    }

    ref @MAIN_DB=@null

    SPA_MAIN_DB::
    {
        return @MAIN_DB
    }

    SPA_LOGIN::&plogin
    {
        ref res=auth.login(plogin)
        ref @MAIN_DB=field.dobj(res,"database",@null)
        @SPA_CONTEXT<@KEY_SESSION_ID>:field.str(res,"ids")
        @SPA_CONTEXT<@KEY_USER_NAME>:field.str(res,"name")
        @SPA_CONTEXT<@KEY_USER_ID>:field.str(res,"uid")
        @SPA_CONTEXT<@KEY_USER_VERIFIED_EMAIL>:field.str(res,"verified_email")
        @SPA_CONTEXT<@KEY_USER_VERIFIED_MOBILE>:field.str(res,"verified_mobile")
        do save_spa_cookie()
        /*exception
        {
            @SPA_CONTEXT<@KEY_SESSION_ID>:""
            do save_spa_cookie()
            do rise_error(-99,"Usuario o contraseña inválidos.\n\n"+to.json(plogin))
        }*/

    }

    SPA_RECONNECT::
    {
        new p
        {
            @"ids":field.dstr(@SPA_CONTEXT,@KEY_SESSION_ID,"")
            @"qname":field.dstr(@SPA_CONTEXT,@KEY_CONNECTION_QNAME,"")
        }
        if @@(p,"ids")==""{p<"ids">:@@(@http_context,"session/user/ids")}
        ref res=auth.login(p)
        ref @MAIN_DB=field.dobj(res,"database",@null)
        
        @SPA_CONTEXT<@KEY_SESSION_ID>:field.str(res,"ids")
        @SPA_CONTEXT<@KEY_USER_NAME>:field.str(res,"name")
        @SPA_CONTEXT<@KEY_USER_ID>:field.str(res,"uid")
        @SPA_CONTEXT<@KEY_USER_VERIFIED_EMAIL>:field.str(res,"verified_email")
        @SPA_CONTEXT<@KEY_USER_VERIFIED_MOBILE>:field.str(res,"verified_mobile")
        do save_spa_cookie()
        exception
        {
            @SPA_CONTEXT<@KEY_SESSION_ID>:""
            do save_spa_cookie()
            do rise_error(-99,"La sesión no es válida o ha caducado. Vuelva a iniciar sesión (autenticarse)."+last_error())
        }

        
    }
    dbr.check_alter_access::&user
    {
        ref manifiesto=from.json(@crudl.access_privilege)

        ref privs=auth.checkPrivs(user, manifiesto)
        return @count(privs)>0
    }
    dbr.alter_id::uid,uname, ids
    {
        // conectar con open
        // if qname==""{return}
        if ids==""{return}
        if uid==""{return}
         ref db=dbr.open(@@(@SPA_CONTEXT,@KEY_CONNECTION_QNAME))
         
        // verificar si en tuser existe uid y si no existe insertarlo, con userid=uid, username=uname, pwd=uuid() (recuperas su sys_pk porque te va a servir para insertar la sesion (sys_session.iuser))
        new params
        {
            @"userid":uid
            @"username":uname
            @"pwd":uuid()
            @"sys_guid":uuid()
        }
        sys_pk_user = dbr.num(db, "Select sys_pk from tuser where userid=@userid", params)
        // ref t=dbr.rec(db,"select * from tuser where userid=@userid",params)
        // if dbr.is_open(db){do rise_error(99,to.json(t))}
        if not(sys_pk_user)
        {
            do dbr.execute(db, "insert into tuser(sys_timestamp,sys_guid,username,pwd,pwdmd5,userid) values(now(), @sys_guid,@username,@pwd,@pwd, @userid)", params)
            sys_pk_user = dbr.num(db, "Select sys_pk from tuser where userid=@userid;", params)
            
        }
        // verificar si en sys_session existe el ids, si no insertar una fila en sys_session (una sesión cerrada es sys_deleted=1)
        new p
        {
            @"sys_pk_user":sys_pk_user
            @"sys_guid":ids
        }

        ids_u = dbr.str(db, "select ss.sys_guid from sys_session ss where ss.sys_guid=@sys_guid and not ifnull(ss.sys_deleted,0);", p)

        if ids_u == ""
        {
            do dbr.execute(db, "insert into sys_session(sys_timestamp,sys_dtcreated,sys_guid,sys_deleted,iuser, sys_recver,clientinfo) values(now(),now(), @sys_guid,0,@sys_pk_user,0,'Unknow')", p)
        }

        do dbr.close(db)

        //return dbr.reconnect(@@(@SPA_CONTEXT,@KEY_CONNECTION_QNAME), ids)
        // exception{}
    }
    do on_initRequest()
    
}